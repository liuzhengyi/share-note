// 2012-05-28

网站使用MVC架构

	主要文件和目录：
		config :
		存放系统的各项配置信息，如网站根目录，数据库信息目录，库目录等。

		do.php, modules.php :
		用户访问任何页面，页面上的响应文件都是modules.php 所有的表单处理动作都由do.php处理。
		这两个文件通过url中的参数来动态包含相应的文件，呈现给用户。

		action/ :
		存放响应用户提交动作的文件，处理完动作之后直接跳转，除了提示信息，不会在前台显示页面。

		models/, templates/default/ :
		models和templates/default目录下存放的文件有着相同的文件名，它们一一对应。
		一一对应的两个文件被编译脚本compile.sh编译为modules/目录下的一个文件。
		在响应用户对某个页面的请求时，modules.php动态的将modules/目录下相应的文件包含进来，
		返回给用户。


	具体架构如下：
	$dbConfFile
	$webRoot
	   |----config		系统配置文件
	   |----includes.php	公共包含文件，主要是对一些公共基础文件的引用
	   |----do.php		action拦截器，action一般为表单提交，需要写入数据库的动作
	   |----modules.php	模块拦截器，控制具体模块的显示
	   |----moudles/default/存放具体的页面文件，由models/和templates/中对应的文件编译生成
	   |----models/		存放具体页面文件的一部分，主要包括获取变量的PHP代码
	   |----templates/	存放具体页面文件的另一部分，主要包括控制页面显示的html代码，有少量PHP代码
	   |----skins/...	存放系统的css文件
	   ...

	开发过程：
		对于action文件，直接编写即可，参考下面给出的文件规范。

		对于需要显示给用户的页面，考虑其需要用PHP获取哪些数据，将
		这部分放到models下相应模块目录中；将控制页面显示的部分放
		到templates目录下相应的模块子目录中；两者的文件名要相同。
		然后在网站根目录下运行compile.sh脚本，该脚本将上述两个文件
		编译为一体，置于modules目录下。（也就是说上述两个同名的文件
		其实是一个文件，只是被我们强行拆离了，为了将数据与形式分离，
		显示给用户的文件还是要把它们结合起来，所以需要编译）

		总结起来：

		将页面的数据和控制分离，分别编写models文件和templates文件
		然后运行compile.sh，编译生成相应的modules文件。
		然后在modules.php中的appArray中注册对应的信息。

		如果是action文件，则编写相应的action文件之后，还要
		在do.php中注册相应的拦截转发信息。



编码规范(摘自iwebsns开发规范文档)：
===============================

此部分是针对流程上的规范,命名和代码规范详见后面的[系统编码规范]部分。

Action 目录下文件的规范:
------------------------
<?php
	//引入公共方法【主要有用户权限认证,防刷新等模块,以及在 foundation 下自己定义的功能模块】
	require("foundation/aanti_refresh.php");
	......相关引入代码

	//引入相关语言包
	$a_langpackage=new albumlp;

	......相关处理代码

	//取得相关变量
	$album_id = short_check(get_args('album_id'));
				// get_args ($name)已经封装了$_GET[]和$_POST[]的获得
	$visitor_id=get_sess_userid();
				//get_sess_userid()已经封装了$_SESSION[]

	//数据表定义区
	$t_album_comment = $tablePreStr."album_comment";//获得真正的表名
	global $dbServs; // initial in $dbConfFile
	$dbo = new dbex($dbServs);//取得数据库操作对象

	//数据库操作，读或写
	......相应代码

	//回调函数，关于该回调函数的使用，参见下面的介绍
	action_return(1,$a_langpackage->a_add_suc,"-1");//此函数的定义在 do.php 中
	}
?>

回调函数action_return()的一些介绍
----------------------------------------
	action_return($status,$message,$target)

	关于 action_return(参数 1,参数 2,参数 3)的说明:
	参数 1 的默认值为 1 表示成功,如果非 1 表示失败;参数 2 表示系统要提示的信息,如果非空则系统会提
	示参数 2 设置的信息,空则不提示信息,默认值为空;参数 3 如果是-1 返回上一页地址,0 则关闭本页面,
	空则返回到 do.php 拦截容器配制资源信息的第二项的地址,非以上情况则返回当前设定的地址。



Models 目录下文件的规范
---------------------------------
<?php
	//引入语言包
	$a_langpackage=new albumlp;

	//引入相应模块页面
	require("foundation/auser_mustlogin.php");

	//变量取得
	$album_id=short_check(get_args('album_id'));
	
	//数据表定义区
	$t_album = $tablePreStr."album";

	// 数据库操作（一般为读）
	global $dbServs; // initial in $dbConfFile
	$dbo = new dbex($dbServs);//取得数据库操作对象
	......相应代码
?>


语言包的抽取标准:(暂无)
------------------------------
模板文件内需要抽成语言包的内容,直接提取到 langpackage->语言文件夹下,语言包的文件命名一般是
以模块来命名的,代码要封装成类的形式,变量是以类的属性体现。变量的命名一般是$+文件名的前两位
首字母_对应表示内容的英文单词。


系统编码规范:
------------------------------
1、 文件的编码要求,必需是 UTF-8 编码格式保存。

2、 文件夹命名要求,名称必需用英文同时能反应此文件夹下文件整体功能。

3、 文件命名要求:
	a) Action 目录:模块名_功能名.action.php
	b) Foundation 目录:首字母(a:代码片断 f:函数 c:类)模块名_功能名.(calss?).php
	c) Model 目录:模块名_功能名.php

4、 内部编码命名要求:
	a) 变量:使用英文命名或者缩写(3-4 字母),单词之间用’_’连接,全部小写。
	b) 常量:常量的定义要求字母全大写
	c) 函数:通常每个方法和函数都是执行一个动作的,所以对它们的命名应该清楚的
	   明它们是做什么的,格式为动词+名词的格式,判断类返回值应为 bool 型例如:function is_Login(){}
	d) 类:使用大写字母作为词的分隔,其他的字母均使用小写,名字的首字母使用大写,不要使用下划线('_')。
	e) 接口:使用大写字母作为词的分隔,其他的字母均使用小写,名字的首字母使用大写,不要使用下划线('_')

5、 编写原则:
	a) 变量一定要先定义后使用。
	b) 能编写成函数的不要写成代码断,能写成类的不要编写成分散的函数。
	c) 编写成 a)原则目的是为了以后更好的扩展和修改,以实现程序以后在变更时,我们只需要修改
	   对应的函数和对应的类就行,而无需了解引用它们的地方,实现系统的快速的修改和升级。
	d) 在函数编写时,要写清楚函数的使用规则和说明,以及的参数的含义和注明开发者和修改时间。

	e) 编写代码一定缩进。
	f) 在程序中,不要定义无意义的变量,如$a $b 致使程序晦涩难懂。
	g) 数据在添加和修改时一定要验证数据的有效性,保持和数据库中定义的一致性。
	h) 在程序开发中,对$_GET $_POST 都已进行了封装,统一使用 get_args($name)方法调用。

	i) 对于 session 的使用,开发者要做到,能不使用 session 就尽最大可能的不使用,以提高程序的
	   运行速度,系统对 session 已经进行了封装,对有些 session 进行了固定封装,请开发者尽可能
	   的使用系统定义的, 如果是非系统固定定义的session, 请使用基本的封装函数
	   set_session($key,$value)及 get_session($key)方法。封装的主要目的是防止 session 串用,便
	   于统一管理和修改。
